package test.view;

import inria.smarttools.core.component.PropertyMap;

import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JList;

import test.Test;
import utils.Request;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * 
 * @author rabah
 */
public class ChatFrame extends javax.swing.JFrame implements IChatView {

	private static final long serialVersionUID = 983790661010527762L;

	private Test chat;
	private List<String> all = new ArrayList<String>();
	private List<String> friendsConnected = new ArrayList<String>();

	/**
	 * Creates new form chat
	 */
	public ChatFrame(Test chatComponent) {
		chat = chatComponent;
		setTitle(chat.getIdName());
		initComponents();

		setVisible(true);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		bas = new javax.swing.JPanel();
		jPanel1 = new javax.swing.JPanel();
		request = new javax.swing.JTextField();
		send = new javax.swing.JButton();
		jSeparator1 = new javax.swing.JSeparator();
		recherche = new javax.swing.JButton();
		scroll1 = new javax.swing.JScrollPane();
		debug = new javax.swing.JTextArea();
		center = new javax.swing.JPanel();
		jScrollPane2 = new javax.swing.JScrollPane();
		friends = new javax.swing.JList<String>();
		scrol2 = new javax.swing.JScrollPane();
		messages = new javax.swing.JTextArea();
		jScrollPane1 = new javax.swing.JScrollPane();
		connected = new javax.swing.JList<String>();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		bas.setLayout(new javax.swing.BoxLayout(bas,
				javax.swing.BoxLayout.PAGE_AXIS));

		jPanel1.setLayout(new java.awt.GridLayout(2, 2));
		jPanel1.add(request);

		send.setText("Envoi");
		send.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sendActionPerformed(evt);
			}
		});
		jPanel1.add(send);
		jPanel1.add(jSeparator1);

		recherche.setText("Recherche");
		recherche.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				rechercheActionPerformed(evt);
			}
		});
		jPanel1.add(recherche);

		bas.add(jPanel1);

		debug.setColumns(20);
		debug.setRows(5);
		scroll1.setViewportView(debug);

		bas.add(scroll1);

		getContentPane().add(bas, java.awt.BorderLayout.PAGE_END);

		center.setLayout(new javax.swing.BoxLayout(center,
				javax.swing.BoxLayout.LINE_AXIS));

		friends.setPreferredSize(new java.awt.Dimension(10, 80));
		friends.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				friendsMouseClicked(evt);
			}
		});
		jScrollPane2.setViewportView(friends);

		center.add(jScrollPane2);

		messages.setColumns(20);
		messages.setRows(5);
		scrol2.setViewportView(messages);

		center.add(scrol2);
		connected.setPreferredSize(new java.awt.Dimension(10, 80));
		connected.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				connectedMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(connected);

		center.add(jScrollPane1);

		getContentPane().add(center, java.awt.BorderLayout.CENTER);

		pack();
	}// </editor-fold>

	protected void connectedMouseClicked(MouseEvent evt) {
		if (evt.getClickCount() == 2) {
			add(friendsConnected, connected.getSelectedValue(), friends);
			chat.connectTo(chat.getIdName(), "test",
					connected.getSelectedValue(), null, null, null,
					new PropertyMap());
		}
	}

	private void friendsMouseClicked(java.awt.event.MouseEvent evt) {
		if (evt.getClickCount() == 2) {
			remove(friendsConnected, friends.getSelectedValue(), friends);
			//chat.disconnectInput(friends.getSelectedValue());
		}
	}

	private void sendActionPerformed(java.awt.event.ActionEvent evt) {
		chat.output(friends.getSelectedValue(), request.getText());
		messages.append(chat.getIdName() + "<-" + request.getText() + "\n");
	}

	private void rechercheActionPerformed(java.awt.event.ActionEvent evt) {
		Request req = new Request(chat.getIdName(), request.getText(), 5);
		String requete = req.serializeJSON();
		chat.outputRecherche(requete);
		debug.append("BROADCAST <- " + request.getText() + "\n");
	}

	/**
	 * Add Contat Direct
	 */
	@Override
	public void addNeighbour(String name) {
		add(friendsConnected, name, friends);
	}

	@Override
	public void addConnected(String expeditor) {
		add(all, expeditor, connected);
	}

	/**
	 * Ajouter un element dans un JLIST sans redoublant
	 * 
	 * @param array
	 * @param str
	 * @param list
	 */
	private void add(List<String> array, String str, JList<String> list) {
		if (!array.contains(str)) {
			array.add(str);
			String[] lst = new String[array.size()];
			for (int i = 0; i < array.size(); i++) {
				lst[i] = array.get(i);
			}
			list.setListData(lst);
		}
	}

	/**
	 * Supprimer un elment dans une JLIST
	 * 
	 * @param array
	 * @param str
	 * @param list
	 */
	private void remove(List<String> array, String str, JList<String> list) {
		if (array.contains(str)) {
			array.remove(str);
			String[] lst = new String[array.size()];
			for (int i = 0; i < array.size(); i++) {
				lst[i] = array.get(i);
			}
			list.setListData(lst);
		}
	}

	@Override
	public void messageArrived(String expeditor, String message) {
		messages.append(expeditor + " -> " + message + "\n");

	}

	@Override
	public void messageDebug(String expeditor, String message) {
		debug.append(expeditor + " -> " + message + "\n");

	}

	// Variables declaration - do not modify
	private javax.swing.JPanel bas;
	private javax.swing.JPanel center;
	private javax.swing.JList<String> connected;
	private javax.swing.JTextArea debug;
	private javax.swing.JList<String> friends;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JTextArea messages;
	private javax.swing.JButton recherche;
	private javax.swing.JTextField request;
	private javax.swing.JScrollPane scrol2;
	private javax.swing.JScrollPane scroll1;
	private javax.swing.JButton send;
	// End of variables declaration

}
